/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package github.com/delgado-jacob/spl-toolkit/pkg/bindings */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 3 "bindings.go"

#include <stdlib.h>
#include <string.h>

typedef struct {
    char* error;
    char* result;
} SPLResult;

typedef struct {
    char** data_models;
    char** datasets;
    char** lookups;
    char** macros;
    char** sources;
    char** source_types;
    char** input_fields;
    int data_models_count;
    int datasets_count;
    int lookups_count;
    int macros_count;
    int sources_count;
    int source_types_count;
    int input_fields_count;
    char* error;
} SPLQueryInfo;

static char* allocate_string(const char* str) {
    if (str == NULL) return NULL;
    size_t len = strlen(str) + 1;
    char* result = malloc(len);
    if (result) {
        strcpy(result, str);
    }
    return result;
}

static char** allocate_string_array(int count) {
    if (count <= 0) return NULL;
    return (char**)malloc(count * sizeof(char*));
}

static void free_string_array(char** arr, int count) {
    if (arr == NULL) return;
    for (int i = 0; i < count; i++) {
        if (arr[i]) free(arr[i]);
    }
    free(arr);
}

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern int spl_mapper_new();
extern int spl_mapper_new_with_config(char* configJSON);
extern void spl_mapper_free(int mapperID);
extern char* spl_mapper_load_mappings(int mapperID, char* mappingsJSON);
extern SPLResult* spl_mapper_map_query(int mapperID, char* query);
extern SPLResult* spl_mapper_map_query_with_context(int mapperID, char* query, char* contextJSON);
extern SPLQueryInfo* spl_mapper_discover_query(int mapperID, char* query);
extern void spl_result_free(SPLResult* result);
extern void spl_query_info_free(SPLQueryInfo* info);

#ifdef __cplusplus
}
#endif
