name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.22'
  PYTHON_VERSION: '3.11'

jobs:
  test-go:
    name: Test Go Code
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Download dependencies
      run: go mod download
      
    - name: Run linting
      run: make lint
      
    - name: Run tests
      run: make test
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: go
        name: go-coverage

  test-python:
    name: Test Python Bindings
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements-dev.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r python/requirements-dev.txt
        
    - name: Build shared library
      run: make build-shared
      
    - name: Test Python bindings
      run: make python-test

  build-python-wheels:
    name: Build Python wheels
    runs-on: ${{ matrix.os }}
    needs: [test-go, test-python]
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Set up Python 3.11 for cibuildwheel driver
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install cibuildwheel
      run: pip install cibuildwheel==2.18.1

    - name: Build wheels with cibuildwheel
      env:
        CIBW_BUILD: "cp38-* cp39-* cp310-* cp311-* cp312-*"
        CIBW_SKIP: "*musllinux* *_universal2*"  # skip musl & universal2 (Go native)
        # Install Go inside manylinux container; add it to PATH after extraction
        CIBW_BEFORE_ALL_LINUX: |
          curl -sSL https://go.dev/dl/go${{ env.GO_VERSION }}.linux-amd64.tar.gz -o /tmp/go.tar.gz
          tar -C /opt -xzf /tmp/go.tar.gz
        CIBW_ENVIRONMENT_LINUX: PATH=/opt/go/bin:$PATH
      run: python -m cibuildwheel python --output-dir dist

    - name: Upload wheel artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-wheels-${{ matrix.os }}
        path: dist/*.whl

  build:
    name: Build Artifacts
    runs-on: ${{ matrix.os }}
    needs: [test-go, test-python]
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Build all targets
      run: make release-build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts-${{ matrix.os }}
        path: dist/
        retention-days: 30

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, build-python-wheels]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Build release artifacts
      run: make release-build
      
    - name: Download wheel artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-wheels-ubuntu-latest
        path: dist/
    - uses: actions/download-artifact@v4
      with:
        name: python-wheels-macos-latest
        path: dist/
    - uses: actions/download-artifact@v4
      with:
        name: python-wheels-windows-latest
        path: dist/
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: dist/*
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_MANAGER }}
        
    - name: Publish Python package to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        packages_dir: dist

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test-go, test-python]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: jmd862000/spl-toolkit
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max